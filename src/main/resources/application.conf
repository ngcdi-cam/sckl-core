akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-config-on-start = off
  actor {

    provider = "remote"
    
    enable-additional-serialization-bindings = on
    allow-java-serialization = off

    serializers {
       proto = "akka.remote.serialization.ProtobufSerializer"
       java = "akka.serialization.JavaSerializer"
       own = "org.ngcdi.serializer.Serializer"
    }

    serialization-bindings {
      "java.lang.String" = proto
      "com.google.protobuf.Message" = proto
      "org.ngcdi.sckl.msgs.DigitalAssetMessage" = proto
      "java.lang.Boolean" = proto
      "java.lang.Integer" = proto
      "java.lang.Double" = proto
      "scala.Array" = proto
      "scala.collection.immutable.List" = proto
      "org.ngcdi.sckl.msgs.SMRegistration$" = own
      "org.ngcdi.sckl.msgs.NewInfrastructure" = own
      "org.ngcdi.sckl.msgs.Sense" = own
      "org.ngcdi.sckl.msgs.SenseFlow" = proto
      "org.ngcdi.sckl.msgs.InfrastructureReady" = own
      "org.ngcdi.sckl.msgs.Measurement" = own
      "org.ngcdi.sckl.msgs.AggregateLocalView" = own
      "org.ngcdi.sckl.msgs.DARegistration" = proto
      "org.ngcdi.sckl.msgs.ReplaceFunction" = proto
      "org.ngcdi.sckl.msgs.FunctionDisposal" = proto
      "org.ngcdi.sckl.msgs.StopMessage" = proto
      "org.ngcdi.sckl.msgs.AnomalyDetected" = proto
      "org.ngcdi.sckl.State" = proto
      "org.ngcdi.sckl.msgs.RegisterProvisioner" = proto
      "org.ngcdi.sckl.State" = proto
      "org.ngcdi.sckl.AnomLoc" = proto
    }

    debug {
      receive = off
      lifecycle = off
      autoreceive = off
      fsm = off
      event-stream = off
    }
  }
  remote {
     artery {
      transport = tcp # See Selecting a transport below
      canonical.hostname = ${clustering.ip}
      canonical.port = ${clustering.port}
    }
  }
  
}

clustering {
 ip = "127.0.0.1"
 ip = ${?CLUSTER_IP}
 dev-id = "0"
 dev-id = ${?DEV_ID}
 port = 1600
 port = ${?CLUSTER_PORT}
 seed-ip = "127.0.0.1"
 seed-ip = ${?CLUSTER_IP}
 seed-ip = ${?SEED_PORT_1600_TCP_ADDR}
 seed-port = 1600
 seed-port = ${?SEED_PORT_1600_TCP_PORT}
 cluster.name = clustering-cluster
 launcher = ${?LAUNCHER}
 nodes = 0
 nodes = ${?NODES}
 monitor-from = 0
 monitor-from = ${?MONITOR_FROM}
}
sckl{
datasource.datadir = "test"
datasource.datadir = ${?DATADIR}
service.hosts = "00:00:00:00:00:02"
services = ${?KEY_SERVICES}
neighbour.left = 0
neighbour.left = ${?LEFT_NEIGHBOUR}
neighbour.right = 0
neighbour.right = ${?RIGHT_NEIGHBOUR}
neighbours = "c1,c2,c3,c4,c5,c6,c7,c8,c9,c10"

rest{
  sdn{
   server = "127.0.0.1"
   server = ${?SDNC_SERVER}
   port = 8080
   port = ${?SDNC_PORT}
   monitoring.url = "/stats/flow/"
   monitoring.url = ${?MONITORING_URL}
  }
  netw{
   api_key= ""
   api_key= ${?NETW_API_KEY}
   server = "mnet"
   server = ${?NETW_SERVER}
   port = 9081
   port = ${?NETW_PORT}
   urls = [${?NETW_URLS}]
  }
  ui{
   api_key= ""
  # api_key= ${?UI_API_KEY}
   server = "hooks.slack.com"
 #  server = ${?UI_SERVER}
   port = 80
#   port = ${?UI_PORT}
   url = ${?UI_URL}
  }
 }
}
kamon.metric.tick-interval = 5 seconds
kamon {
  system-metrics {
   #sigar is enabled by default
   sigar-enabled = true

   #jmx related metrics are enabled by default
   jmx-enabled = true
  }
  environment{
        tags{
            custom-id = ${?LAUNCHER}
        }
  }
  util{
        filters{
                "akka.tracked-actor"{
                        includes = ["clustering-cluster/user/**"]
                        excludes = ["clustering-cluster/system/**"]
                }
        }
  }
  
}
